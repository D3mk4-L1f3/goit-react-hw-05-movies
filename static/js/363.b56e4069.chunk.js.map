{"version":3,"file":"static/js/363.b56e4069.chunk.js","mappings":"4NAMMA,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAHe,+BAIfC,QAAS,CACP,eAAgB,oBAElBC,OAAQ,CACNC,QATY,mCAUZC,SAAU,WAPd,SAWeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,GAA5B,2FAAuCC,EAAvC,+BAA+C,GAAIC,EAAnD,+BAA6D,EAAGC,EAAhE,+BAAuE,EAAvE,cAGYH,EAHZ,OAIW,eAJX,OAQW,aARX,QAcW,cAdX,QAkBW,WAlBX,QAsBW,cAtBX,wCAKyBR,EAASY,IAAI,uBALtC,cAKQC,EALR,qDASyBb,EAASY,IAAI,gBAAiB,CAC7CR,OAAQ,CAAEK,MAAAA,EAAOK,eAAe,EAAOH,KAAAA,KAVjD,eASQE,EATR,qDAeyBb,EAASY,IAAT,iBAAuBF,IAfhD,eAeQG,EAfR,qDAmByBb,EAASY,IAAT,iBAAuBF,EAAvB,aAnBzB,eAmBQG,EAnBR,qDAuByBb,EAASY,IAAT,iBAAuBF,EAAvB,YAA0C,CACzDN,OAAQ,CAAEO,KAAAA,KAxBpB,eAuBQE,EAvBR,0CA6Bc,IAAIE,MAAM,qBA7BxB,WAgC4B,MAApBF,EAASG,OAhCjB,uBAiCY,IAAID,MAAJ,qCAAwCF,EAASG,SAjC7D,iCAoCWH,EAASI,MApCpB,uCAuCY,KAAMJ,SAAW,KAAMA,SAASG,OAAS,KAvCrD,OAwCW,MAxCX,QA2CW,MA3CX,QA+CW,MA/CX,gCAyCQE,EAAe,iCAzCvB,oCA4CQA,EACE,sEA7CV,oCAgDQA,EAAe,2BAhDvB,6BAoDQA,EAAe,sDApDvB,cAsDIC,EAAAA,GAAAA,MAAYD,GAtDhB,uF,iNCfaE,EAAsBC,EAAAA,GAAAA,QAAH,+CAInBC,EAAaD,EAAAA,GAAAA,OAAH,iOAYVE,EAAqBF,EAAAA,GAAAA,QAAH,qMAoBlBG,EAAcH,EAAAA,GAAAA,IAAH,4KAMXI,EAAYJ,EAAAA,GAAAA,GAAH,4CAITK,EAAUL,EAAAA,GAAAA,EAAH,kE,8IC9CPM,E,MAAWN,GAAAA,GAAH,kY,uCCmDrB,EA9Ca,WACX,IACMX,GADSkB,EAAAA,EAAAA,MAAPC,GAGR,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAgBC,EAAAA,EAAAA,SAAO,GAiB7B,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gGAETH,EAAcI,QAFL,kEAIS9B,EAAAA,EAAAA,GAAa,SAAU,GAAIG,GAJpC,OAIRG,EAJQ,OAKdmB,EAAQnB,EAASkB,MACjBE,EAAcI,SAAU,EANV,kDAQdlB,EAAAA,GAAAA,MAAY,KAAMmB,SARJ,0DAAH,qDAWfF,GACD,GAAE,CAAC1B,KAGF,SAACiB,EAAD,UACGI,EAAKQ,KAAI,SAACC,EAAOC,GAAR,OACR,2BACE,SAAC,KAAD,CACEC,IACEF,EAAMG,aAAN,yCACsCH,EAAMG,cACxC,6CAENC,IAAG,mBAAcJ,EAAMK,SAEzB,wBACE,uBAAIL,EAAMK,UAEZ,wBACE,uBAAIL,EAAMM,gBAbd,UAAYN,EAAMX,GAAlB,YAAwBW,EAAMK,KAA9B,YAAsCJ,GAD9B,KAoBf,C","sources":["api/MovieDatabaseApi.jsx","component-style/movieDetails.styled.js","component-style/cast/cast.styled.js","components/cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst API_KEY = '0eb5e646e9395809eb15661d4afcde1d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nasync function fetchGetInfo(operation, query = '', movieID = 0, page = 1) {\n  try {\n    let response;\n    switch (operation) {\n      case 'trendingIO':\n        response = await instance.get('/trending/movie/day');\n        break;\n\n      case 'searchIO':\n        response = await instance.get('/search/movie', {\n          params: { query, include_adult: false, page },\n        });\n        break;\n\n      case 'detailsIO':\n        response = await instance.get(`/movie/${movieID}`);\n        break;\n\n      case 'castIO':\n        response = await instance.get(`/movie/${movieID}/credits`);\n        break;\n\n      case 'reviewsIO':\n        response = await instance.get(`/movie/${movieID}/reviews`, {\n          params: { page },\n        });\n        break;\n\n      default:\n        throw new Error('Invalid operation');\n    }\n\n    if (response.status !== 200) {\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n\n    return response.data;\n  } catch (error) {\n    let errorMessage;\n    switch (error.response ? error.response.status : null) {\n      case 400:\n        errorMessage = 'Oops! Check/correct your input';\n        break;\n      case 401:\n        errorMessage =\n          'Oops! Something went wrong with the API key. Contact the developer.';\n        break;\n      case 404:\n        errorMessage = 'Oops! Page is not found!';\n        break;\n\n      default:\n        errorMessage = 'Oops! Something went wrong. Please try again later!';\n    }\n    toast.error(errorMessage);\n    throw error;\n  }\n}\n\nexport { fetchGetInfo };\n","import styled from 'styled-components';\n\nexport const MovieDetailsSection = styled.section`\n  padding: 10px 50px;\n`;\n\nexport const ButtonBack = styled.button`\n  margin-bottom: 20px;\n  width: 150px;\n  appearance: none;\n  border: none;\n  font-size: 20px;\n  border-radius: 10px;\n  background: rgba(0, 0, 0, 0.12);\n  padding: 8px 16px;\n  cursor: pointer;\n`;\n\nexport const MovieDetailsStyled = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n\np{\n  font-size: 24px;\n}\n\nh3{\n  font-size: 30px;\n}\n\ni{\n  font-size: 24px;\n}\n\n`;\n\nexport const MoviePoster = styled.img`\n  width: 300px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const TitleName = styled.h2`\n  font-size: 38px;\n`;\n\nexport const Message = styled.p`\n  font-size: 24px;\n  padding: 10px 50px;\n`;","import styled from 'styled-components'\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 20px;\n  padding-left: 0;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  justify-content: center;\n  list-style-type: none;\n  & li {\n    max-width: 400px;\n    background-color: #f9f9f9;\n    border-radius: 16px;\n    overflow: hidden;\n  }\n  & p {\n    font-size: 24px;\n    text-align: center;\n    word-wrap: break-word;\n  }\n`;","import React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList } from '../../component-style/cast/cast.styled';\nimport { MoviePoster } from '../../component-style/movieDetails.styled';\nimport { fetchGetInfo } from '../../api/MovieDatabaseApi';\nimport { toast } from 'react-toastify';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const movieID = id;\n\n  const [cast, setCast] = useState([]);\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        if (!isFirstRender.current) return;\n\n        const response = await fetchGetInfo('castIO', '', movieID);\n        setCast(response.cast);\n        isFirstRender.current = false;\n      } catch (error) {\n        toast.error(error.message);\n      }\n    };\n    fetchCast();\n  }, [movieID]);\n\n  return (\n    <CastList>\n      {cast.map((actor, index) => (\n        <li key={`${actor.id}_${actor.name}_${index}`}>\n          <MoviePoster\n            src={\n              actor.profile_path\n                ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                : 'https://fakeimg.pl/200x300?text=No%20Photo'\n            }\n            alt={`Photo of ${actor.name}`}\n          />\n          <p>\n            <b>{actor.name}</b>\n          </p>\n          <p>\n            <i>{actor.character}</i>\n          </p>\n        </li>\n      ))}\n    </CastList>\n  );\n};\n\nexport default Cast;\n"],"names":["instance","axios","baseURL","headers","params","api_key","language","fetchGetInfo","operation","query","movieID","page","get","response","include_adult","Error","status","data","errorMessage","toast","MovieDetailsSection","styled","ButtonBack","MovieDetailsStyled","MoviePoster","TitleName","Message","CastList","useParams","id","useState","cast","setCast","isFirstRender","useRef","useEffect","fetchCast","current","message","map","actor","index","src","profile_path","alt","name","character"],"sourceRoot":""}