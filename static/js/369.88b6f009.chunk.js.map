{"version":3,"file":"static/js/369.88b6f009.chunk.js","mappings":"4NAMMA,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAHe,+BAIfC,QAAS,CACP,eAAgB,oBAElBC,OAAQ,CACNC,QATY,mCAUZC,SAAU,WAPd,SAWeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,GAA5B,2FAAuCC,EAAvC,+BAA+C,GAAIC,EAAnD,+BAA6D,EAAGC,EAAhE,+BAAuE,EAAvE,cAGYH,EAHZ,OAIW,eAJX,OAQW,aARX,QAcW,cAdX,QAkBW,WAlBX,QAsBW,cAtBX,wCAKyBR,EAASY,IAAI,uBALtC,cAKQC,EALR,qDASyBb,EAASY,IAAI,gBAAiB,CAC7CR,OAAQ,CAAEK,MAAAA,EAAOK,eAAe,EAAOH,KAAAA,KAVjD,eASQE,EATR,qDAeyBb,EAASY,IAAT,iBAAuBF,IAfhD,eAeQG,EAfR,qDAmByBb,EAASY,IAAT,iBAAuBF,EAAvB,aAnBzB,eAmBQG,EAnBR,qDAuByBb,EAASY,IAAT,iBAAuBF,EAAvB,YAA0C,CACzDN,OAAQ,CAAEO,KAAAA,KAxBpB,eAuBQE,EAvBR,0CA6Bc,IAAIE,MAAM,qBA7BxB,WAgC4B,MAApBF,EAASG,OAhCjB,uBAiCY,IAAID,MAAJ,qCAAwCF,EAASG,SAjC7D,iCAoCWH,EAASI,MApCpB,uCAuCY,KAAMJ,SAAW,KAAMA,SAASG,OAAS,KAvCrD,OAwCW,MAxCX,QA2CW,MA3CX,QA+CW,MA/CX,gCAyCQE,EAAe,iCAzCvB,oCA4CQA,EACE,sEA7CV,oCAgDQA,EAAe,2BAhDvB,6BAoDQA,EAAe,sDApDvB,cAsDIC,EAAAA,GAAAA,MAAYD,GAtDhB,uF,kKCfaE,EAAaC,EAAAA,GAAAA,GAAH,0NAcVC,EAAWD,EAAAA,GAAAA,IAAH,wT,mBCkCrB,EAzCgB,WACd,IACMX,GADSa,EAAAA,EAAAA,MAAPC,GAGR,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAgBC,EAAAA,EAAAA,SAAO,GAkB7B,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,gGAEZH,EAAcI,QAFF,kEAIMzB,EAAAA,EAAAA,GAAa,YAAa,GAAIG,GAJpC,OAIXG,EAJW,OAKjBc,EAAWd,EAASoB,SACpBL,EAAcI,SAAU,EANP,kDAQjBb,EAAAA,GAAAA,MAAY,KAAMe,SARD,0DAAH,qDAYlBH,GACD,GAAE,CAACrB,KAGF,SAACU,EAAD,UACKM,EAAQS,OACTT,EAAQU,KAAI,SAACC,EAAQC,GAAT,OACV,2BACE,wBAAKD,EAAOE,UACZ,SAACjB,EAAD,WACE,uBAAIe,EAAOG,cAHf,UAAYH,EAAOE,OAAnB,YAA6BD,GADnB,KASZ,uBAAG,+BAIV,C","sources":["api/MovieDatabaseApi.jsx","component-style/review/review.styled.js","components/review/Review.jsx"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst API_KEY = '0eb5e646e9395809eb15661d4afcde1d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nasync function fetchGetInfo(operation, query = '', movieID = 0, page = 1) {\n  try {\n    let response;\n    switch (operation) {\n      case 'trendingIO':\n        response = await instance.get('/trending/movie/day');\n        break;\n\n      case 'searchIO':\n        response = await instance.get('/search/movie', {\n          params: { query, include_adult: false, page },\n        });\n        break;\n\n      case 'detailsIO':\n        response = await instance.get(`/movie/${movieID}`);\n        break;\n\n      case 'castIO':\n        response = await instance.get(`/movie/${movieID}/credits`);\n        break;\n\n      case 'reviewsIO':\n        response = await instance.get(`/movie/${movieID}/reviews`, {\n          params: { page },\n        });\n        break;\n\n      default:\n        throw new Error('Invalid operation');\n    }\n\n    if (response.status !== 200) {\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n\n    return response.data;\n  } catch (error) {\n    let errorMessage;\n    switch (error.response ? error.response.status : null) {\n      case 400:\n        errorMessage = 'Oops! Check/correct your input';\n        break;\n      case 401:\n        errorMessage =\n          'Oops! Something went wrong with the API key. Contact the developer.';\n        break;\n      case 404:\n        errorMessage = 'Oops! Page is not found!';\n        break;\n\n      default:\n        errorMessage = 'Oops! Something went wrong. Please try again later!';\n    }\n    toast.error(errorMessage);\n    throw error;\n  }\n}\n\nexport { fetchGetInfo };\n","import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  display: flex;\n  gap: 20px;\n  font-size: 26px;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  list-style-type: none;\n\n  & li {\n    min-width: 300px;\n  }\n`;\n\nexport const ReviewBC = styled.div`\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  padding: 10px;\n\n  &::before {\n    font-size: 24px;\n    content: '\"';\n    color: rgba(0, 0, 0, 0.3);\n  }\n  \n  & p {\n    white-space: pre-wrap; \n    overflow: hidden;\n    font-size: 14px;\n    font-style: italic;\n  }\n`;","import React, { useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useParams } from 'react-router-dom';\nimport {\n  ReviewBC,\n  ReviewList,\n} from '../../component-style/review/review.styled';\nimport { fetchGetInfo } from '../../api/MovieDatabaseApi';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const movieID = id;\n\n  const [reviews, setReviews] = useState([]);\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        if (!isFirstRender.current) return;\n\n        const response = await fetchGetInfo('reviewsIO', '', movieID);\n        setReviews(response.results);\n        isFirstRender.current = false;\n      } catch (error) {\n        toast.error(error.message);\n      }\n    };\n\n    fetchReviews();\n  }, [movieID]);\n\n  return (\n    <ReviewList>\n      {!!reviews.length ? (\n        reviews.map((review, index) => (\n          <li key={`${review.author}_${index}`}>\n            <h4>{review.author}</h4>\n            <ReviewBC>\n              <p>{review.content}</p>\n            </ReviewBC>\n          </li>\n        ))\n      ) : (\n        <p>There is no review yet :(</p>\n      )}\n    </ReviewList>\n  );\n};\n\nexport default Reviews;\n"],"names":["instance","axios","baseURL","headers","params","api_key","language","fetchGetInfo","operation","query","movieID","page","get","response","include_adult","Error","status","data","errorMessage","toast","ReviewList","styled","ReviewBC","useParams","id","useState","reviews","setReviews","isFirstRender","useRef","useEffect","fetchReviews","current","results","message","length","map","review","index","author","content"],"sourceRoot":""}